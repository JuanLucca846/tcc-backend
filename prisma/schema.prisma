generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id Int @id @default(autoincrement())

  name     String
  email    String  @unique
  password String
  admin    Boolean @default(false)

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  course    Courses @relation(fields: [courseId], references: [id])
  courseId Int
  reservations Reservations[]
  loans Loans[]

  @@map("users")
}

model Books {
  id Int @id @default(autoincrement())

  isbn        String @unique
  shelf       String
  bookcase    String
  title       String
  author      String
  description String
  coverImage  String

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  category Categories @relation(fields: [categoryId], references: [id])
  categoryId Int
  reservations Reservations[]
  loans Loans[]
  
  @@map("books")
}

model Courses {
  id Int @id @default(autoincrement())

  name String
  
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  users Users[] 

  @@map("courses")
}

model Categories {
  id Int @id @default(autoincrement())

  name String
  
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  books Books[]

  @@map("categories")
}

model Reservations {
  id Int @id @default(autoincrement())

  status      String 
  reservedAt  DateTime @default(now())
   
  user        Users   @relation(fields: [userId], references: [id])
  userId      Int
  book        Books   @relation(fields: [bookId], references: [id])
  bookId      Int

  @@map("reservations")
}

model Loans {
  id Int @id @default(autoincrement())

  borrowedAt    DateTime @default(now())
  dueDate       DateTime
  returnedAt    DateTime?

  user          Users   @relation(fields: [userId], references: [id])
  userId        Int
  book          Books   @relation(fields: [bookId], references: [id])
  bookId        Int

  @@map("loans")
}